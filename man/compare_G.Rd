% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/compare_G.R
\name{compare_G}
\alias{compare_G}
\title{Compare Two ABM_G States}
\usage{
compare_G(G, G2 = NULL, time1 = NULL, time2 = NULL)
}
\arguments{
\item{G}{An object of class \code{ABM_G}. This can optionally contain a time slice (\code{G$time}).}

\item{G2}{An optional \code{ABM_G} object to compare against \code{G}.
If \code{time2} is supplied, \code{G2} must be \code{NULL}.}

\item{time1}{Optional. A single integer indicating which time slice in \code{G$time}
to treat as the first comparison target.}

\item{time2}{Optional. A single integer indicating which time slice in \code{G$time}
to use as the second comparison target. Cannot be used together with \code{G2}.}
}
\value{
A named list with two components:
\describe{
\item{\code{stage}}{A data.frame summarizing differences in stage-level variables across G and G2.}
\item{\code{agents}}{A data.frame summarizing differences in agent-level attributes across G and G2.}
}
}
\description{
This function compares two ABM_G objects, either at two different time
points within a single object or across two objects,
and returns a structured report of differences in both stage-level variables
and agent-level attributes.

Stage fields and agent attributes are traversed recursively to extract their
deepest values. Element-wise differences are identified, and any unsupported
or missing comparisons are skipped with a warning.
}
\details{
\itemize{
\item If \code{time1} is specified, \code{G$time[[time1]]} is used in place of \code{G}.
\item If \code{time2} is specified, it is assumed that \code{G$time[[time2]]} provides
the second comparison target, and \code{G2} must be \code{NULL}.
Agent attributes named ID are automatically excluded from comparison.
}

Agents are compared based on their IDs rather than their positions in the list.
This ensures that logically corresponding agents are matched.
}
\examples{
agents1 <- init_agents(3, attr_df = data.frame(age = 1:3, sex = c("m","m","f")))
agents2 <- init_agents(3, attr_df = data.frame(age = 1:3, sex = c("m","f","f")))
G1 <- setABM(agents = list(agents = agents1))
G2 <- setABM(agents = list(agents = agents2))
compare_G(G1, G2)

# Use time slices within G
G <- setABM(stage = list(y = 1), global_FUN = list(increase_y = function(){self$y <- self$y + 1}))
G <- runABM(G, plan = "increase_y", times = 1)
compare_G(G, time1 = 1, time2 = 2)
}
