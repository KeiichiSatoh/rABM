% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/operator-af.R
\name{\%af\%}
\alias{\%af\%}
\title{Agent's act_FUN Execution Operator}
\usage{
act_FUNs \%af\% args
}
\arguments{
\item{act_FUNs}{A list of functions.}

\item{args}{A named list of arguments to apply to each function via \code{do.call()}.}
}
\value{
A list of return values from each function. If a function fails, its result will be \code{NULL}.
}
\description{
This operator is part of the \strong{\code{rABM}} framework and provides a concise and robust way
to apply a list of 'act_FUN' using a shared set of arguments.
It is particularly useful when working with action functions stored in
\code{ABM_Agent} objects and accessed via operators like \code{\link{\%aa\%}} or subsets using \code{\link{\%ai\%}}.

The \verb{\%af\%} operator applies each function in the list using \code{do.call()} with the provided
argument list. If a function raises an error, the error is caught and reported as a warning,
and the corresponding result is set to \code{NULL}. Execution continues for the remaining functions.

This allows for robust batch execution of agent behaviors within a simulation step.
}
\examples{
# Define an action function to increase age
get_older <- function() { self$age <- self$age + 1 }

# Initialize agents with the action
agents <- init_agents(
  n = 3,
  attr_df = data.frame(age = 1:3),
  act_FUN = get_older
)

# Apply to all agents (no arguments required)
agents \%aa\% "get_older" \%af\% list()

# Create ABM_G object
G <- setABM(
  agents = agents
)

# Apply to a subset of agents with argument G
G$agents \%ai\% c(1, 3) \%aa\% "get_older" \%af\% list(G = G)

}
\seealso{
\code{\link{\%aa\%}} to extract agent functions,
\code{\link{\%ai\%}} to subset agents by index.
}
