% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/runABM_repl.R
\name{runABM_repl}
\alias{runABM_repl}
\title{Run an Interactive REPL for Agent-Based Simulation}
\usage{
runABM_repl(
  G,
  plot_FUN_name = NULL,
  plot_FUN_args = list(),
  plot_FUN = NULL,
  summary_FUN_name = NULL,
  summary_FUN_args = list(),
  summary_FUN = NULL,
  times = NULL,
  stop_FUN_name = NULL,
  stop_FUN_args = list(),
  stop_FUN = NULL,
  save_log = TRUE,
  return_prompt_log = FALSE,
  return_log_file = TRUE,
  log_file_name = NULL
)
}
\arguments{
\item{G}{An ABM_G class object representing the simulation environment.}

\item{plot_FUN_name}{Character string specifying the name of the plot function stored in \code{G}.
Either this or \code{plot_FUN} must be provided (but not both).}

\item{plot_FUN_args}{A named list of additional arguments passed to \code{plot_FUN}.}

\item{plot_FUN}{A function used to visualize the current simulation state.}

\item{summary_FUN_name}{Character string specifying the name of the summary function stored in \code{G}.
Either this or \code{summary_FUN} must be provided (but not both).}

\item{summary_FUN_args}{A named list of additional arguments passed to \code{summary_FUN}.}

\item{summary_FUN}{A function used to summarize the current simulation state.}

\item{stop_FUN_name}{Character string specifying the name of the stop function stored in \code{G}.
Either this or \code{stop_FUN} must be provided (but not both).}

\item{stop_FUN_args}{A named list of additional arguments passed to \code{stop_FUN}.}

\item{stop_FUN}{A function used to stop the simulation.}

\item{save_log}{Logical. If \code{TRUE}, the internal state of \code{G} will be saved at each step using \code{G$.save()}.
If provided, this overrides \code{plot_FUN_name}.}

\item{return_prompt_log}{Logical. If \code{TRUE}, a list containing \code{G} and the prompt history will be returned.}

\item{return_log_file}{Logical. If \code{TRUE}, the prompt history will be saved to a log file.}

\item{log_file_name}{Optional character string specifying the file name for saving the prompt log.
If \code{NULL}, the name is automatically generated using the current timestamp.}
}
\value{
If \code{return_prompt_log = TRUE}, a list with elements:
\item{G}{The updated \code{ABM_G} object after interactive execution.}
\item{prompt_log}{A character vector of all commands entered during the REPL session.}
Otherwise, only the updated \code{G} object is returned.
}
\description{
This function launches an interactive REPL (Read-Eval-Print Loop) interface
for stepwise execution of an agent-based model (ABM) using the rABM framework.
It allows flexible execution of \code{act_FUN}, \code{plot_FUN}, \code{global_FUN}, and
other functions associated with the simulation object \code{G}.
Users can issue commands one at a time, inspect simulation status,
and visualize or summarize results step by step.
}
\details{
This REPL supports several command formats:
\itemize{
\item{\code{agents:idx:act_FUN} — Applies an action function to specified agents.}
\item{\code{select_FUN -> agents_name::act_FUN} — Applies an action to agents selected by a selector function.}
\item{\code{FUN} — Executes a function (e.g., plot_FUN, global_FUN) with optional arguments.}
\item{\code{EXPR 1 + 1} — Evaluates an arbitrary R expression.}
\item{\code{G} — Prints the current simulation object.}
\item{\code{HELP} — Displays usage instructions.}
\item{\code{END} — Ends the session.}
}
Pressing ENTER without typing a command re-executes the previous command.
}
\examples{
\dontrun{
agents <- init_agents(n = 10,
act_FUN = list(move = function(step = 1){
  G$posit[self$ID,"x"] <- G$posit[self$ID,"x"] + step
}))

plot_map <- function(){
  plot(x = self$posit$x, y = self$posit$y, xlim = c(0, 11),
       pch = 15, main = paste("t =", self$time), xlab = "x-posit", ylab = "agents")
  abline(v=10)
}


G <- setABM(
  agents = agents,
  stage = list(posit = data.frame(x = 0, y = 1:10)),
  select_FUN = list(random_select = function(){sample.int(10, size = 1)}),
  global_FUN = list(retreat_all = function(){self$posit[,"x"] <- self$posit[,"x"] - 1}),
  stop_FUN = list(reached_goal = function(){any(self$posit[,"x"] >= 10)}),
  plot_FUN = list(plot_map = plot_map),
  summary_FUN = list(current_stage = function(){cat("Current posit \n"); print(self$posit)})
)

reached_goal = function(){any(G$posit[,"x"] >= 10)}

# Run REPL interactively
G2 <- runABM_repl(G = G, summary_FUN_name = "current_stage",
                  plot_FUN_name = "plot_map", stop_FUN = reached_goal)
}

}
\seealso{
\code{\link{runABM}}, \code{\link{init_agents}}, \code{\link{setABM}}
}
