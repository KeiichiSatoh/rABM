% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/class_ABM_Agent.R
\name{ABM_Agent}
\alias{ABM_Agent}
\title{ABM_Agent Class}
\description{
The \code{ABM_Agent} class provides methods and fields for creating and
managing agent's action and attributes in an agent-based model (ABM).
It allows agents to have custom fields, methods, and active bindings,
making this class highly flexible for various simulation scenarios.
}
\details{
\code{ABM_Agent} is the class for agents that includes:
\itemize{
\item A initialize method (i.e., \code{new()})
\item Methods for adding/removing fields, methods, and active bindings
(i.e., \code{.add_field()}, \code{.add_method()}, \code{.add_active_binding()},
\code{remove_field()}).
\item Functions to retrieve agent attributes (i.e., \code{.save()}).
\item A print method to display agent information (i.e., \code{print()}.
\item clone method to copy the instanced agent object (i.e., \code{clone()}).
}

This class is implemented using the \code{R6} class. While agents can
be instantiated directly using \code{ABM_Agent$new()},
it is highly recommended to use \link{init_agent} for batch creation of
agents for the actual usage. The \code{init_agent} function provides
the navigation for setting various field types and includes validation checks
that is not present in the \code{ABM_Agent} class method.

Similarly, to modify fields of agents,
consider using the \link{modify_agents} function for the safer approach.

Name of the fields and methods:
Each field name and method name must be unique within the agent's namespace.
Attempting to provide a duplicate name will result in an error,
as duplicate names can interfere with the agent's proper functioning.
Field names are set as attributes, while methods are assigned as callable
functions.
The environment of each method is automatically set to the agent instance.
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-ABM_Agent-new}{\code{ABM_Agent$new()}}
\item \href{#method-ABM_Agent-.add_field}{\code{ABM_Agent$.add_field()}}
\item \href{#method-ABM_Agent-.add_method}{\code{ABM_Agent$.add_method()}}
\item \href{#method-ABM_Agent-.add_active_binding}{\code{ABM_Agent$.add_active_binding()}}
\item \href{#method-ABM_Agent-.remove_field}{\code{ABM_Agent$.remove_field()}}
\item \href{#method-ABM_Agent-.field_list}{\code{ABM_Agent$.field_list()}}
\item \href{#method-ABM_Agent-print}{\code{ABM_Agent$print()}}
\item \href{#method-ABM_Agent-.save}{\code{ABM_Agent$.save()}}
\item \href{#method-ABM_Agent-clone}{\code{ABM_Agent$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ABM_Agent-new"></a>}}
\if{latex}{\out{\hypertarget{method-ABM_Agent-new}{}}}
\subsection{Method \code{new()}}{
Initialize a new agent with custom fields and methods.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ABM_Agent$new(fields = list(), methods = list())}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{fields}}{A named list of fields to initialize the agent with.
Each field is assigned a value in the new agent instance.}

\item{\code{methods}}{A named list of functions (methods) to initialize the agent with.
Each method is added to the agent's instance.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The instance of the agent with the provided fields and methods.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ABM_Agent-.add_field"></a>}}
\if{latex}{\out{\hypertarget{method-ABM_Agent-.add_field}{}}}
\subsection{Method \code{.add_field()}}{
Add a new field to the agent.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ABM_Agent$.add_field(name, value)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name}}{A string representing the name of the field to add. The name must be unique within the agent.}

\item{\code{value}}{The value to assign to the new field.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
This method does not return a value. It adds the specified field to the agent.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ABM_Agent-.add_method"></a>}}
\if{latex}{\out{\hypertarget{method-ABM_Agent-.add_method}{}}}
\subsection{Method \code{.add_method()}}{
Add a new method to the agent.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ABM_Agent$.add_method(name, method)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name}}{A string representing the name of the method to add. The name must be unique within the agent.}

\item{\code{method}}{A function to add as a method. The function will be associated with the specified name.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
This method does not return a value. It adds the specified method to the agent.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ABM_Agent-.add_active_binding"></a>}}
\if{latex}{\out{\hypertarget{method-ABM_Agent-.add_active_binding}{}}}
\subsection{Method \code{.add_active_binding()}}{
Add a new active binding to the agent.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ABM_Agent$.add_active_binding(name, FUN)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name}}{A string representing the name of the active binding.
The name must be unique within the agent.}

\item{\code{FUN}}{A function that defines the behavior of the active binding.
This function is dynamically called whenever the active binding is accessed.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
This method does not return a value. It modifies the agent by adding the specified active binding.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ABM_Agent-.remove_field"></a>}}
\if{latex}{\out{\hypertarget{method-ABM_Agent-.remove_field}{}}}
\subsection{Method \code{.remove_field()}}{
Remove a field or method from the agent.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ABM_Agent$.remove_field(name)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name}}{A string representing the name of the field to remove.
The field must exist in the agent instance.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
This method does not return a value. It modifies the agent instance by removing the specified field.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ABM_Agent-.field_list"></a>}}
\if{latex}{\out{\hypertarget{method-ABM_Agent-.field_list}{}}}
\subsection{Method \code{.field_list()}}{
Show the property of the fields in a structured format.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ABM_Agent$.field_list()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ABM_Agent-print"></a>}}
\if{latex}{\out{\hypertarget{method-ABM_Agent-print}{}}}
\subsection{Method \code{print()}}{
Print the agent's attributes in a structured format.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ABM_Agent$print()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
This method does not return a value. It outputs the agent's attributes to the console.
#' @details
This method provides a detailed view of the agent's attributes,
categorizing them based on their type.
Attributes are grouped into the following categories:
\itemize{
\item ID: Agent's ID.
\item Scalar fields: Single values.
\item Vector fields: Multiple values in a vector.
\item Matrix fields: 2D data structures.
\item Array fields: Multidimensional data structures.
\item Data frame fields: Tabular data.
\item Other fields: Fields that do not fit the above types.
\item act_FUN: Actions of the agents.
Fields that are active bindings are marked with an asterisk (\code{*}) next to their names.
Active bindings are fields whose values are computed dynamically upon access.
}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ABM_Agent-.save"></a>}}
\if{latex}{\out{\hypertarget{method-ABM_Agent-.save}{}}}
\subsection{Method \code{.save()}}{
Retrieve the current attributes of the agent as a list.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ABM_Agent$.save()}\if{html}{\out{</div>}}
}

\subsection{Details}{
This method returns the fields of the \code{ABM_Agent}
object in a standard list format.
It is primarily used for saving the state of an
agent at each round during a simulation.

Note: This method is intended for internal use during
simulations. Users are not expected to call this method directly.
}

\subsection{Returns}{
A named list containing the values of the agent's fields, including the \code{ID} field.
Methods including \code{act_FUN} are excluded from the output.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ABM_Agent-clone"></a>}}
\if{latex}{\out{\hypertarget{method-ABM_Agent-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ABM_Agent$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
