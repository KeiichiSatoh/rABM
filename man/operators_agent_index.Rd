% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/operators-ai.R
\name{\%ai\%}
\alias{\%ai\%}
\alias{\%aidp\%}
\alias{\%ai\%<-}
\title{Agent Selection by Index Operations}
\usage{
agents \%ai\% idx

agents \%aidp\% idx

`\%ai\%`(agents, idx) <- value
}
\arguments{
\item{agents}{A list of ABM_Agent objects.}

\item{idx}{An integer vector of indices to extract or replace.}

\item{value}{A list of replacement agents. Must match the length of \code{idx}.}
}
\value{
\itemize{
\item \verb{\%ai\%} returns a list of agents which are shallow copied.
\item \verb{\%aidp\%} returns a list of agents which are deep copied.
\item \verb{\%ai\%<-} returns the modified agent list.
}
}
\description{
These operators  enable efficient and intuitive
extraction and replacement of agents within an \strong{\code{ABM_G}} object's agent
list or a standalone list of \strong{\code{ABM_Agent}} objects.
They are specifically designed for \strong{Agent-Based Modeling (ABM)}
contexts, allowing you to access and modify agents by their numerical index.

The \verb{\%ai\%} operator extracts agents by index and returns shallow references
to the agents (i.e., original objects). In contrast, the \verb{\%ai\%} operator
returns deep clones of the agents are returned instead.

The \verb{\%ai\%<-} replacement operator updates the agents at the given indices.
The length of \code{value} must match the length of \code{idx}.
}
\examples{
# Create and extract agents
agents <- init_agents(n = 3, attr_df = data.frame(x = 1:3))
agents \%ai\% c(1, 3)

# Use deep clone if needed
agents \%ai\% c(1, 3)                  # This will return shallow copies
agents \%aidp\% c(1, 3)                # This will return deep copies

# replace the 2nd agent to the 1st agent
agents \%ai\% 2 <- list(agents[[1]])

# Use within ABM_G object
G <- setABM(agents = agents)
G$agents \%ai\% c(2, 3)
G$agents \%ai\% c(2, 3) <- list(G$agents[[1]], G$agents[[1]])

}
\seealso{
\code{\link{\%aa\%}} for accessing and
modifying agent attributes.
}
