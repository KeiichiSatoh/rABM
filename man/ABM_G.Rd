% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/class_ABM_G.R
\docType{class}
\name{ABM_G}
\alias{ABM_G}
\title{ABM_G Class}
\description{
\code{ABM_G} is the core class of \code{netABM} that bundle
datasets for running ABM.
}
\details{
ABM class

\code{G} stands for "Game". This class is implemented using the \code{R6} class system.
Although \code{G} object can be instantiated directly using \code{ABM_G$new()},
it is highly recommended to use the \link{setABM} function for practical usage.
The \code{setABM} function provides navigation for setting various field types and
includes validation checks that are not present in the \code{ABM_G} class method.

Similarly, to modify fields of agents, consider using the \link{modify_G}
function for the safer approach.

Name of the fields and methods: Each field name and method name must
be unique within the agent's namespace.
\subsection{Important Note on Copying an \code{ABM_G} Object}{

Copying an \code{R6} object differs from copying other R objects. For example,
if a user copies \code{G} to \code{G2} using \code{G2 <- G}, modifying the fields of \code{G2}
will also modify the fields of \code{G}. This happens because both objects share
the same encapsulated environment. To avoid unintended behavior,
use the \link{copy_G} function or
call \code{G$clone(deep = TRUE)} to create a deep copy of the object.
\itemize{
\item \strong{Environment Assignment}:
The function's environment is set to the object's encapsulated environment
(\code{self$.__enclos_env__}) to ensure access to the object's internal state.
\item \strong{Field Registration}:
The created active binding is registered in the object's private field
category as a \code{"stage"}.
}

The field_types are either 'agent', 'stage',
'global_FUN', 'select_FUN', 'update_FUN', or 'partial_update_FUN_body'.

Active bindings are a feature of R that links a field's value to a function.
Active bindings allow the field's value to be dynamically computed or
updated whenever it is accessed or modified.

The \code{partial_body} parameter can be provided as either:
\itemize{
\item An R expression: The method extracts the first element of the expression
as the function body.
\item A character string: The method parses the string into an R expression
and extracts the first element.
}

The \code{.remove_field} method performs the following actions:
\itemize{
\item Removes the specified field from the object environment.
\item If the field is an active binding, it also removes the corresponding entry
from the active bindings list in the object's encapsulated environment.
}

The \code{print} method organizes and displays the fields of the \code{ABM_G} object
in a categorized manner:
\itemize{
\item \strong{Agents}: Lists the agents in the object along with their attributes, categorized by scalar, vector, matrix, array, and data.frame types. Active bindings are marked with an asterisk (\code{*}).
\item \strong{Stages}: Lists stage fields and their types, including active bindings (marked with an asterisk).
\item \strong{Functions}: Displays the names of global, select, stop, update, and partial update functions.
\item \strong{Metadata}: Outputs metadata such as the current simulation time, log entries, and notes.
Active bindings in the object are explicitly highlighted,
and a note is included to explain the significance of fields marked with \code{*}.
}

The \code{.save} method performs the following operations:
\itemize{
\item \strong{Field Retrieval}:
\itemize{
\item Extracts all fields categorized as \code{"agent"} or \code{"stage"} from the object.
\item Metadata fields such as \code{time} are also included in the saved state.
}
\item \strong{Agent Data Extraction}:
\itemize{
\item For each agent field, calls the agent's internal \code{.save} method to
capture its current state.
\item The saved values are organized by agent names for easy retrieval.
}
\item \strong{Log Entry Creation}:
\itemize{
\item Combines the extracted data into a single log entry.
\item The log entry is stored in the \code{log} field,
with the current simulation time (\code{time}) used as the entry name
(e.g., \code{"t1"}, \code{"t2"}).
}
\item \strong{Log Update}:
\itemize{
\item Appends the new log entry if the current time exceeds the number of
existing log entries.
\item Overwrites the corresponding log entry if it already exists for the
current time.
}
}

The \code{.field_list} method collects and organizes
information about the fields in the \code{ABM_G} object.

The resulting data frame contains the following columns:
\itemize{
\item \code{agent_name}: The name of the set of agents (or \code{NA} for non-agent fields).
\item \code{name}: The field name.
\item \code{category}: The field category (e.g., \code{"agent"}, \code{"stage"}).
\item \code{type}: The field type (e.g., \code{"scalar"}, \code{"vector"}, \code{"matrix"}, \code{"function"}).
\item \code{active_binding}: A logical value indicating if the field is an active binding.
}

This method provides flexibility for accessing agent attributes:
\itemize{
\item If \code{log = NULL}, the method retrieves the attribute values from the current state of the agents.
\item If \code{log} is specified, the method retrieves the attribute values from
the specified log entry. The log entry must exist, and the agents must be present in that log entry.
The method is optimized for internal use and assumes that the \code{agents} field
and \code{log} structure are properly managed.
}
}
}
\seealso{
\link{activeBindingFunction}

\link{parse}, \link{expression}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{log}}{list of the past dataset.}

\item{\code{notes}}{list of the notes.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-ABM_G-new}{\code{ABM_G$new()}}
\item \href{#method-ABM_G-.add_agents}{\code{ABM_G$.add_agents()}}
\item \href{#method-ABM_G-.add_stage}{\code{ABM_G$.add_stage()}}
\item \href{#method-ABM_G-.add_FUN}{\code{ABM_G$.add_FUN()}}
\item \href{#method-ABM_G-.add_active_binding}{\code{ABM_G$.add_active_binding()}}
\item \href{#method-ABM_G-.add_partial_update_FUN_body}{\code{ABM_G$.add_partial_update_FUN_body()}}
\item \href{#method-ABM_G-.remove_field}{\code{ABM_G$.remove_field()}}
\item \href{#method-ABM_G-print}{\code{ABM_G$print()}}
\item \href{#method-ABM_G-.save}{\code{ABM_G$.save()}}
\item \href{#method-ABM_G-.field_list}{\code{ABM_G$.field_list()}}
\item \href{#method-ABM_G-.agent_attr}{\code{ABM_G$.agent_attr()}}
\item \href{#method-ABM_G-clone}{\code{ABM_G$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ABM_G-new"></a>}}
\if{latex}{\out{\hypertarget{method-ABM_G-new}{}}}
\subsection{Method \code{new()}}{
Initialize a new \code{ABM_G} object with custom fields and methods.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ABM_G$new(
  fields = list(),
  methods = list(),
  log = NULL,
  field_category = NA,
  notes = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{fields}}{A named list of fields to initialize the \code{ABM_G} object.
Each field is assigned a value in the new instance.}

\item{\code{methods}}{A named list of functions (methods) to initialize the \code{ABM_G} object.
Each method is added to the instance.}

\item{\code{log}}{A list of the previous \code{ABM_G} object values (default is \code{NULL}).}

\item{\code{field_category}}{A named list specifying categories of fields.}

\item{\code{notes}}{A list of the notes (deefault is \code{NULL}).}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A new instance of the \code{ABM_G} object with the provided fields and methods.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ABM_G-.add_agents"></a>}}
\if{latex}{\out{\hypertarget{method-ABM_G-.add_agents}{}}}
\subsection{Method \code{.add_agents()}}{
Add a set of agents to the \code{ABM_G} object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ABM_G$.add_agents(name, agents)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name}}{A character string specifying the field name for agents.}

\item{\code{agents}}{A list of agents (must be objects of class \code{ABM_Agent}).}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ABM_G-.add_stage"></a>}}
\if{latex}{\out{\hypertarget{method-ABM_G-.add_stage}{}}}
\subsection{Method \code{.add_stage()}}{
Add a stage to the \code{ABM_G} object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ABM_G$.add_stage(name, stage)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name}}{A character string specifying the field name for the stage.}

\item{\code{stage}}{The stage object to be added (e.g., a matrix or data frame).}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ABM_G-.add_FUN"></a>}}
\if{latex}{\out{\hypertarget{method-ABM_G-.add_FUN}{}}}
\subsection{Method \code{.add_FUN()}}{
Add a function (FUN) to the \code{ABM_G} object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ABM_G$.add_FUN(
  name,
  FUN,
  FUN_category = c("global_FUN", "select_FUN", "stop_FUN", "update_FUN")
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name}}{A character string specifying the field name for the function.}

\item{\code{FUN}}{The function to be added.}

\item{\code{FUN_category}}{The type of the function, one of \code{global_FUN}, \code{select_FUN}, \code{stop_FUN}, or \code{update_FUN}.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ABM_G-.add_active_binding"></a>}}
\if{latex}{\out{\hypertarget{method-ABM_G-.add_active_binding}{}}}
\subsection{Method \code{.add_active_binding()}}{
Add an active binding field to the \code{ABM_G} object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ABM_G$.add_active_binding(name, FUN)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name}}{A character string specifying the name of the active binding field.
The name must be unique and not already exist in the current fields.}

\item{\code{FUN}}{A function that defines the behavior of the active binding.
The function is executed whenever the active binding field is accessed or modified.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ABM_G-.add_partial_update_FUN_body"></a>}}
\if{latex}{\out{\hypertarget{method-ABM_G-.add_partial_update_FUN_body}{}}}
\subsection{Method \code{.add_partial_update_FUN_body()}}{
Add a partial update function body to the \code{ABM_G} object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ABM_G$.add_partial_update_FUN_body(name, partial_body)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name}}{A character string specifying the name of the partial update
function body. The name must be unique and not already exist in the current fields.}

\item{\code{partial_body}}{An R expression or a character string representing
the body of the function to be added.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ABM_G-.remove_field"></a>}}
\if{latex}{\out{\hypertarget{method-ABM_G-.remove_field}{}}}
\subsection{Method \code{.remove_field()}}{
Removes a field from the \code{ABM_G} object, including any
associated active bindings and field category entries.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ABM_G$.remove_field(name)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name}}{A character string specifying the name of the field to be removed. The field must exist in the object.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ABM_G-print"></a>}}
\if{latex}{\out{\hypertarget{method-ABM_G-print}{}}}
\subsection{Method \code{print()}}{
This method provides a detailed, structured output of the current state
of an \code{ABM_G} object, including agents, stages, functions, and metadata.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ABM_G$print()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ABM_G-.save"></a>}}
\if{latex}{\out{\hypertarget{method-ABM_G-.save}{}}}
\subsection{Method \code{.save()}}{
This method saves the current state of the \code{ABM_G} object into its log.
The saved state includes field values for agents, stages,
and metadata at the current simulation time.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ABM_G$.save()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ABM_G-.field_list"></a>}}
\if{latex}{\out{\hypertarget{method-ABM_G-.field_list}{}}}
\subsection{Method \code{.field_list()}}{
Generates a list of all fields in the \code{ABM_G} object,
categorizing them based on their type, category, and active binding status.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ABM_G$.field_list()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A data frame containing information about all fields in the \code{ABM_G} object.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ABM_G-.agent_attr"></a>}}
\if{latex}{\out{\hypertarget{method-ABM_G-.agent_attr}{}}}
\subsection{Method \code{.agent_attr()}}{
This internal method retrieves the specified attributes of agents in the \code{ABM_G} object, either from the current state or from a specified log entry. It is designed for internal use, with the expectation that a more user-friendly interface will be provided for general usage.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ABM_G$.agent_attr(agents, attr, log = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{agents}}{A character string specifying the field name of the agents whose attributes are to be retrieved.}

\item{\code{attr}}{A character string specifying the name of the attribute to retrieve for each agent.}

\item{\code{log}}{An optional integer specifying the log entry to retrieve the attribute from. If \code{NULL}, the attribute is retrieved from the current state of the agents (default is \code{NULL}).}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A list containing the values of the specified attribute for each agent.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ABM_G-clone"></a>}}
\if{latex}{\out{\hypertarget{method-ABM_G-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ABM_G$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
