% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/modify_agents.R
\name{modify_agents}
\alias{modify_agents}
\title{Modify a Set of ABM_Agent Objects}
\usage{
modify_agents(
  G = NULL,
  G_agents_name = NULL,
  new_obj = NULL,
  method = c("add_agent", "delete_agent", "replace_agent", "add_attr_df", "add_act_FUN",
    "add_active_binding", "add_other_attrs", "rename", "replace", "copy", "delete_field"),
  field_name = NULL,
  new_field_name = NULL,
  agent_posit = NULL,
  agents = NULL,
  deep = TRUE
)
}
\arguments{
\item{G}{An object of class \code{ABM_G}. If supplied, the agents will be extracted from its field (specified by \code{G_agents_name}).}

\item{G_agents_name}{A string giving the name of the field in \code{G} that stores the agents (e.g., \code{"agents"}). Required if \code{G} is provided.}

\item{new_obj}{The object(s) to add or use for replacement. The structure depends on the type of the field to be added (see \verb{acceptable format} in details).}

\item{method}{A string specifying the modification method. One of:
\code{"add_agent"}, \code{"delete_agent"}, \code{"add_attr_df"},
\code{"add_act_FUN"}, \code{"add_active_binding"},
\code{"add_other_attrs"}, \code{"rename"}, \code{"replace"}, \code{"copy"},
\code{"delete_field"}.}

\item{field_name}{The name of the field to rename, replace, copy, or delete.}

\item{new_field_name}{The new name to assign when renaming or copying a field.}

\item{agent_posit}{Integer vector specifying the positions of agents to delete when \code{method = "delete_agent"}.}

\item{agents}{A list of \code{ABM_Agent} objects. Used if \code{G} is not supplied.}

\item{deep}{Logical. If \code{TRUE} (default), the function operates on a deep clone of the object(s).}
}
\value{
If \code{G} is supplied, returns a modified \code{ABM_G} object. Otherwise, returns a modified list of \code{ABM_Agent} objects.
}
\description{
This function modifies internal fields or structure of agent objects
of class \code{ABM_Agent}. It allows adding or deleting agents,
renaming, copying, replacing, or deleting specific fields,
and adding various types of components (attributes, methods, active bindings).

For modifying the top-level structure of an ABM model (e.g., adding or renaming the agent set itself),
use \code{\link[=modify_G]{modify_G()}} instead.
}
\details{
This function is intended to modify the internal structure of agents (objects of class \code{ABM_Agent}). It can be used either directly on a list of agents or via a field (typically \code{"agents"}) stored inside an \code{ABM_G} object.

\strong{Important distinction from \code{modify_G()}:}
While \code{modify_G()} operates on the structure of the \code{ABM_G} object itself—including adding or removing fields like \code{stage}, \code{global_FUN}, or even the entire \code{agents} field—\code{modify_agents()} assumes that the \code{agents} field already exists and focuses on modifying its contents.

Use \code{modify_agents()} when you want to:
\itemize{
\item Add or remove attributes, methods, or active bindings to/from each agent
\item Rename or copy existing fields inside each agent
\item Replace values in a specific field across agents
}

Use \code{modify_G()} when you want to:
\itemize{
\item Add, replace, or delete the \code{agents} field itself
\item Modify top-level components of the ABM system (e.g., \code{stage}, \code{global_FUN}, etc.)
}

For a detailed explanation of operations available via the \code{method} argument, see below:

\describe{
\item{\code{"add_agent"}}{Adds one or more new \code{ABM_Agent} objects to the list. Duplicate IDs will be reassigned.}
\item{\code{"delete_agent"}}{Remove agents by position in \code{agents} list.}
\item{\code{"replace_agent"}}{Replace agents by position in \code{agents} list.}
\item{\code{"add_attr_df"}}{Adds new attributes from a vector or data.frame. Each row must correspond to one agent.}
\item{\code{"add_act_FUN"}}{Adds action functions. Each will receive \code{G} and \code{E} as arguments. See more details in \verb{Notes on add_act_FUN}.}
\item{\code{"add_active_binding"}}{Adds active bindings. The input must be a named list of functions.}
\item{\code{"add_other_attrs"}}{Adds arbitrary named attributes as standard fields (not active bindings or functions).}
\item{\code{"rename"}}{Renames a field inside each agent. The field is deleted and re-added under a new name using the correct method.}
\item{\code{"replace"}}{Replaces a field with new values. Accepts vectors, data.frames, or lists depending on the field type.}
\item{\code{"copy"}}{Duplicates a field under a new name. Field type is preserved (attribute, binding, or method).}
\item{\code{"delete_field"}}{Removes a field from all agents.}
}

** Notes on \code{add_act_FUN}
This accepts several format of \code{new_obj} depending on the intention of the users.
\itemize{
\item set a single act_FUN to all agents: set \code{new_obj = act_x}
\item set multiple act_FUNs to all agents: set \code{new_obj = list(act_x = act_x, act_y = act_y, ...)}
\item set a single act_FUN that differ for each agent: set \code{new_obj = list(act_x = list(act_x1, act_x2, ...))}
\item set multiple act_FUNs that differ for each agent: set \code{new_obj = list(act_x = list(act_x1, act_x2, ...), act_y = list(act_y1, act_y2, act_y3))}
}

#' \strong{Note on \code{new_obj} when adding or replacing a single agent}
When adding or replacing a single agent, be sure to wrap the agent in a list.
For example, if you want to replace the second agent with the first agent:
\itemize{
\item This does NOT work: \code{new_obj = G$agents[[1]]}
\item This works correctly: \code{new_obj = list(G$agents[[1]])}
}
}
\examples{
# Create agents and ABM system
agents <- init_agents(n = 3, attr_df = data.frame(age = c(11, 12, 13)))
G <- setABM(agents = agents)

# Add new agents
new_agents <- init_agents(n = 2, attr_df = data.frame(age = c(14, 15)))
G <- modify_agents(G = G, G_agents_name = "agents", new_obj = new_agents,
                   method = "add_agent")
# Add new attribute
G <- modify_agents(G = G, G_agents_name = "agents",
                   new_obj = data.frame(height = c(100, 110, 120, 130, 140)),
                   method = "add_attr_df")

# Rename a field
G <- modify_agents(G = G, G_agents_name = "agents", field_name = "age",
                   new_field_name = "age_years", method = "rename")

# Replace a field
G <- modify_agents(G = G, G_agents_name = "agents", field_name = "age_years",
                   new_obj = c(101, 111, 121, 131, 141), method = "replace")

# Delete a field
G <- modify_agents(G = G, G_agents_name = "agents", field_name = "age_years",
                   method = "delete_field")

# replace the second agent with the first agent
G2 <- modify_agents(G = G, G_agents_name = "agents",
                    new_obj = list(G$agents[[1]]),
                    method = "replace_agent",
                    agent_posit = 2)

# Delete the second and third agent
G <- modify_agents(G = G, G_agents_name = "agents", method = "delete_agent",
                   agent_posit = c(2, 3))

# Modify agents directly (without ABM_G)
agents <- modify_agents(agents = agents,
                        new_obj = list(flag = c(TRUE, FALSE, TRUE)),
                        method = "add_other_attrs")
}
\seealso{
\code{\link[=modify_G]{modify_G()}} for modifying the \code{ABM_G} object itself.
}
