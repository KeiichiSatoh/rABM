% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/setABM.R
\name{setABM}
\alias{setABM}
\title{Construct an \code{ABM_G} Class Object}
\usage{
setABM(
  agents = NULL,
  stage = NULL,
  active_binding_field = NULL,
  global_FUN = NULL,
  select_FUN = NULL,
  stop_FUN = NULL,
  update_FUN = NULL,
  partial_update_FUN_body = NULL,
  log = NULL,
  time = NULL,
  notes = NULL,
  init = list(agents = NULL, stage = NULL, active_binding_field = NULL, global_FUN =
    NULL, select_FUN = NULL, stop_FUN = NULL, update_FUN = NULL, partial_update_FUN_body
    = NULL, log = NULL, time = NULL, notes = NULL)
)
}
\arguments{
\item{agents}{A list of \code{ABM_Agent} objects representing agents in the model,
typically created using the \link{init_agent} function. Alternatively,
a positive integer can be provided to create that number of agents.
Default is \code{NULL}, meaning no agents will be created.}

\item{stage}{A data structure (e.g., matrix, list, or other formats)
representing the 'stage' where agents act. Default is \code{NULL}.}

\item{active_binding_field}{A named list specifying active binding fields
that allow dynamic behavior for specific stages. Default is \code{NULL}.}

\item{global_FUN}{A function for global operations affecting the \code{G} object. Default is \code{NULL}.}

\item{select_FUN}{A function to select agents during simulation based on specific criteria. Default is \code{NULL}.}

\item{stop_FUN}{A function defining the stopping conditions for the simulation. Default is \code{NULL}.}

\item{update_FUN}{A function that encapsulates one complete iteration of agent updates during the simulation. Default is \code{NULL}.}

\item{partial_update_FUN_body}{A body of expressions to construct parts of \code{update_FUN}.
Provide either character or \code{expression} objects. Default is \code{NULL}.}

\item{log}{A list containing snapshots of the \code{G} object at each simulation step. Default is \code{NULL}.}

\item{time}{An integer representing the current time step of the \code{G} object.
The initial time is 1. Default is \code{NULL}, which sets \code{time = 1}.}

\item{notes}{A list or data frame for user-defined notes or metadata related to the simulation. Default is \code{NULL}.}

\item{init}{A named list of initial values for any of the arguments, including \code{agents}, \code{stage}, \code{active_binding_field},
\code{global_FUN}, \code{select_FUN}, \code{stop_FUN}, \code{update_FUN}, \code{partial_update_FUN_body}, \code{log}, \code{time}, \code{notes}.
If both \code{init} and individual arguments are specified, the values in \code{init} take precedence. Default is an empty list.}
}
\value{
An object of class \code{ABM_G} representing the initialized ABM.
This object contains fields and methods required to manage the simulation.
}
\description{
The \code{setABM} function constructs a \code{G} object (short for 'game') for
agent-based model (ABM) simulations.
The created \code{G} object serves as the foundation for running simulations
using the \code{runABM} function.
}
\details{
The \code{setABM} function offers a flexible interface to define agents, stages,
and functions for ABM simulations.
Key rules for parameter configuration include:
\itemize{
\item For a single object, pass it directly.
\item For multiple objects, use a \code{list}.
\item Named fields should use the format \code{list(field_name = x)}.
If no name is provided (e.g., \code{list(x)}), the object name will be used as the field name.
}
\subsection{Parameter-Specific Notes}{
\itemize{
\item \strong{\code{agents}}:
\itemize{
\item Specify a number to create a corresponding number of agents.
This approach is useful for initializing the skeleton of a \code{G} object,
with further details to be added later using functions like \link{modify_agent}.
\item Alternatively, provide a list of \code{ABM_Agent} objects created via \link{init_agent}.
To include multiple agent groups, use a list, e.g., \code{agents = list(teacher = 2, student = 3)}.
}
\item \strong{\code{stage}}: Accepts various formats, including scalar, vector, matrix, array, data.frame, or list.
Multiple stages can be specified as \code{stage = list(stage1 = mat1, stage2 = mat2)}.
\item \strong{Functions (\code{active_binding_field}, \code{global_FUN}, \code{select_FUN}, \code{stop_FUN}, \code{update_FUN})}:
Functions can be specified in one of four ways:
\enumerate{
\item Function object: e.g., \code{act_FUN = act_x1}.
\item Anonymous function: e.g., \code{act_FUN = function() {...}}.
\item Function name as a string: e.g., \code{act_FUN = "act_x1"}.
\item Function name with arguments as a string: e.g., \code{act_FUN = "act_x1(a = 1)"}.
}
\item \strong{\code{active_binding_field}}: This parameter specifies dynamic fields
that calculate their values based on other fields in the \code{G} object.
\item \strong{\code{global_FUN}}: Operates on fields of the \code{G} object, similar to \code{act_FUN} at the agent level.
\item \strong{\code{select_FUN}}: Returns agent's index in the list of agents (NOT: \code{IDs}) based on a selection condition.
\item \strong{\code{stop_FUN}}: Ends the simulation if specific conditions are met (returns \code{TRUE}).
\item \strong{\code{update_FUN}}: Encapsulates one complete iteration of updates.
\item \strong{\code{partial_update_FUN_body}}: A modular way to predefine parts of \code{update_FUN}.
}
}

\subsection{Additional Notes}{

All functions (except \code{partial_update_FUN_body} and \code{active_binding_field})
automatically receive two arguments internally: \code{G} (the \code{G} object) and \code{E}
(a temporary environment for intermediate objects).
}

\subsection{Logging and Metadata}{
\itemize{
\item \strong{\code{log}}: Stores snapshots of the \code{G} object after each simulation step.
\item \strong{\code{time}}: Tracks the current simulation time step, starting at 1 by default.
\item \strong{\code{notes}}: Allows users to store custom metadata or notes as a list.
}
}
}
\examples{
G <- setABM(agents = 3, stage = matrix(0, 3, 3))
}
\seealso{
\link{runABM}, \link{init_agent}, \link{ABM_G}
}
\author{
Keiichi Satoh
}
