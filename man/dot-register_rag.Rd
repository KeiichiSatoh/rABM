% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ask_gpt_helper.R
\name{.register_rag}
\alias{.register_rag}
\title{Register RAG Store from GitHub Repository for GPT Use}
\usage{
.register_rag(gpt, embed_args, store_location)
}
\arguments{
\item{gpt}{A character string specifying the GPT backend.
One of \code{"openai"}, \code{"bedlock"}, \code{"databricks"}, \code{"google_vertex"}, or \code{"ollama"}.}

\item{embed_args}{A named list of arguments passed to the embedding function (e.g., model name).}

\item{store_location}{A character string specifying the DuckDB file path to store embeddings.}
}
\value{
Invisibly returns the created RAG store object.
Called primarily for its side effects.
}
\description{
This internal function builds a local RAG (Retrieval-Augmented Generation) store
by fetching R package files from GitHub and embedding them using the selected embedding engine.
}
\details{
The function fetches the contents of the GitHub repository \code{KeiichiSatoh/rABM}, including:
\itemize{
\item R scripts (\verb{/R})
\item C++ source files (\verb{/src})
\item Unit tests (\verb{/tests/testthat})
\item DESCRIPTION, NAMESPACE, NEWS.md, and README.md
}

It uses \code{ragnar::MarkdownDocument()} and \code{markdown_chunk()} to chunk and structure these texts.
The embeddings are created using the appropriate \verb{ragnar::embed_*()} function, partially applied with \code{embed_args}.
Finally, \code{ragnar_store_insert()} is used to populate the DuckDB store, and \code{ragnar_store_build_index()} is called to finalize it.
}
\keyword{internal}
